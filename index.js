// Neo4j-specific extensions
const ngjs = require("neo4j-graphql-js");
// Neo4j driver
const neo4j = require('neo4j-driver');
// Appserver functions
const apollo = require("apollo-server");
// For fetching the schema with synchronous HTTP
// This is heresy to NodeJS orthodoxy, but we actually _want_ to block on this request, because the
// Apollo server is unable to start up without a schema.
const request = require('sync-request');

// Define the database driver.
// Get the values from environment variables
const neo4jserver = process.env.NEO4J_SERVER
const username = process.env.NEO4J_USER
const passwd = process.env.NEO4J_PASSWD
// Construct the driver
const driver = neo4j.driver( `bolt://${neo4jserver}`, neo4j.auth.basic(username, passwd));

// Just use autogenerated resolvers from the typeDefs in the schema.
const resolvers = {}

// A schema is a collection of type definitions (hence "typeDefs") that together define the "shape"
// of queries that are executed against your data.
// Fetch it via HTTP from the Restagraph server, to get the current version generated dynamically,
// instead of baking it in here or using some hacky workaround.
const schemaBaseUrl = process.env.RG_SERVER
const typeDefs = request('GET', `${schemaBaseUrl}/schema/v1?format=graphql`).getBody('utf8');

//const schema = apollo.makeExecutableSchema({ typeDefs, resolvers });
const schema = ngjs.makeAugmentedSchema({ typeDefs });

// The ApolloServer constructor requires two parameters: your schema
// definition and your set of resolvers.
const server = new apollo.ApolloServer({ schema, resolvers, context: { driver }});

// The `listen` method launches a web server.
server.listen().then(({ url }) => {
  console.log(`Apollo Server ready at ${url}`);
});
